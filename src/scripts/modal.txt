import { toggleLikeButton } from "./card";
import { clearValidation, validationSettings } from "./validation";
import { patchUserData, postNewCard, updateAvatar } from "./api";
import { userId } from "./index";

from index.js

// import {
//   setPopupOpenEventListener,
//   openImageModal,
//   handleEditProfile,
//   handleAddCard,
//   setPopupCloseEventListener,
//   fillProfileInputs,
//   handleEditAvatar,
//   profileTitle,
//   profileDescription,
//   profileAvatar,
//   buttonPlus,
//   modalNewCard,
//   buttonEditProfile,
//   modalEditProfile,
//   modalOpenImage,
//   placesList,
//   buttonAvatar,
//   avatarPopup,
// } from "./modal";


export const handleOpenModal = (modalWindow) => {
  modalWindow.classList.add("popup_is-opened");
  document.addEventListener("keydown", handleCloseModalByEsc);
};

export const handleCloseModal = (modalWindow) => {
  modalWindow.classList.remove("popup_is-opened");
  document.removeEventListener("keydown", handleCloseModalByEsc);
};

// popup close

export const setPopupCloseEventListener = (popupNode) => {
  const closeButton = popupNode.querySelector(".popup__close");
  if (!closeButton) {
    console.error("button not found");
    return;
  }

  closeButton.addEventListener("click", () => handleCloseModal(popupNode));

  const popupContent = popupNode.querySelector(".popup__content");
  if (!popupContent) {
    console.error("popup body unknown");
    return;
  }

  popupContent.addEventListener("click", (evt) => evt.stopPropagation());

  popupNode.addEventListener("click", () => handleCloseModal(popupNode));
};

//

// esc close
function handleCloseModalByEsc(evt) {
  if (evt.key === "Escape") {
    const openedPopup = document.querySelector(".popup_is-opened");
    handleCloseModal(openedPopup);
  }
}

export const buttonPlus = document.querySelector(".profile__add-button");

export const modalNewCard = document.querySelector(".popup_type_new-card");

// popup open

export const setPopupOpenEventListener = (openButton, popupNode, callBack) => {
  const handleClick = () => {
    handleOpenModal(popupNode);

    const popups = [popupEdit, popupNewCard, avatarPopup];
    popups.forEach((popup) => clearValidation(popup, validationSettings));

    if (typeof callBack === "function") {
      callBack();
    }
  };

  openButton.addEventListener("click", handleClick);
};

const imageModal = document.querySelector(".popup__image");

const imageModalCaption = document.querySelector(".popup__caption");

export const openImageModal = (item) => {
  imageModal.src = item.link;
  imageModal.alt = item.name;
  imageModalCaption.textContent = item.name;
};

export const modalOpenImage = document.querySelector(".popup_type_image");

const popupEdit = document.querySelector(".popup_type_edit");
const profileFormElement = popupEdit.querySelector(".popup__form");
const nameInput = profileFormElement.querySelector(".popup__input_type_name");
const jobInput = profileFormElement.querySelector(
  ".popup__input_type_description"
);
export const profileTitle = document.querySelector(".profile__title");
export const profileDescription = document.querySelector(
  ".profile__description"
);

export function fillProfileInputs() {
  nameInput.value = profileTitle.textContent;
  jobInput.value = profileDescription.textContent;
}

export const buttonAvatar = document.querySelector(".profile__image");

export const avatarPopup = document.querySelector(".popup_type-avatar");

export const buttonEditProfile = document.querySelector(
  ".profile__edit-button"
);

export const modalEditProfile = document.querySelector(".popup_type_edit");

export function handleEditProfile() {
  function handleProfileFormSubmit(evt) {
    evt.preventDefault();
    renderLoading(evt.submitter, "Сохранение...");

    const name = nameInput.value;
    const job = jobInput.value;

    patchUserData({ name, about: job })
      .then(() => {
        profileTitle.textContent = name;
        profileDescription.textContent = job;
        evt.target.reset();
        handleCloseModal(popupEdit);
      })
      .catch((err) => {
        console.error("Ошибка обновления профиля:", err);
      })
      .finally(() => {
        renderLoading(evt.submitter, "Сохранить");
      });
  }

  profileFormElement.addEventListener("submit", handleProfileFormSubmit);
}

export const renderLoading = (element, status) => {
  if (!(element instanceof HTMLElement)) {
    console.error("this is not html element");
    return;
  }

  if (typeof status !== "string") {
    console.error("this is not string");
    return;
  }

  element.textContent = status;
};

export const placesList = document.querySelector(".places__list");

//Add new card
const popupNewCard = document.querySelector(".popup_type_new-card");

export function handleAddCard(createCard, deleteCard, placesList) {
  const newCardFormElement = popupNewCard.querySelector(".popup__form");
  const cardNameInput = newCardFormElement.querySelector(
    ".popup__input_type_card-name"
  );
  const cardUrlInput = newCardFormElement.querySelector(
    ".popup__input_type_url"
  );

  function handleFormNewCardSubmit(evt) {
    evt.preventDefault();
    renderLoading(evt.submitter, "Сохранение...");

    const card = {
      name: cardNameInput.value,
      link: cardUrlInput.value,
    };

    postNewCard(card)
      .then((cardData) => {
        const cardItem = createCard(cardData, {
          deleteCard,
          likeCard: toggleLikeButton,
          openImageCard: openImageModal,
          userId,
        });

        placesList.prepend(cardItem);
        handleCloseModal(popupNewCard);
        newCardFormElement.reset();
      })
      .catch((err) => {
        console.error("Error add new card:", err);
      })
      .finally(() => {
        renderLoading(evt.submitter, "Сохранить");
      });
  }

  newCardFormElement.addEventListener("submit", handleFormNewCardSubmit);
}

//change avatar

export const profileAvatar = document.querySelector(".profile__image");

export function handleEditAvatar() {
  const avatarFormElement = avatarPopup.querySelector(".popup__form");
  const avatarInput = avatarFormElement.querySelector(".popup__input_type_url");

  function handleFormSubmitAvatar(evt) {
    evt.preventDefault();
    renderLoading(evt.submitter, "Сохранение...");

    updateAvatar({ avatar: avatarInput.value })
      .then((data) => {
        profileAvatar.style.backgroundImage = `url(${data.avatar})`;
        handleCloseModal(avatarPopup);
      })
      .catch((err) => {
        console.error("Ошибка обновления аватара:", err);
      })
      .finally(() => {
        renderLoading(evt.submitter, "Сохранить");
      });
  }

  avatarFormElement.addEventListener("submit", handleFormSubmitAvatar);
}

//KonstantinN traning project sprint 7
